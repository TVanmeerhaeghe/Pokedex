Framework cadre de travail qui permet d'utiliser des composants déja crée et qui facilite la colaboration

Site web : A chaque fois que l'utilisateur demande une page le serveur renvoie la page
App web : Le serveur renvoie une seule page et le JS s'occupe de gérer la navigation (+ rapide, pas besoin de recharger la page) Architecture SPA (Single Page Application)

React : Populaire, Maintenu par Facebook (Viable), DomVirtuel(Performant), Orienté Composant
Composant : Assemblage d'HTML/CSS et d'une function JS. Découpé en fonction de leur role.

Fichier .tsx : Fichier .jsx mais pour TS

Component : Deux syntaxe différente. 
    Functionnal (StateLess) : dit ²"Purs" Comportement prévisible pas dependance extérieurs, plus Performant, plus concis
    Class (StateFull) : Gestion du State*, Cycle de vie 
    Parfois il faut refactoriser Functionnal a class pour pouvoir implémenter le state ou/et le cycle de vie
    Solution a cette problématique les HOOKS
    Hooks : 
        Simple function JS
        Permettent de bénéficier d'un state et d'un cycle de vie dans les composants de function sans class
    Functional Component + Hooks > Class Component

Cycle de Vie :
    Passage des étapes du composant 
    Création : componentDidMount : Quand il est insérer dans le Dom
    Modification : componentDidUpdate : Quand les informations sont modifié dans le Dom
    Supression : componentWillUnmount : Apeller juste avant la supression du component du Dom

App.tsx : 
    Destructuring pour extraire le type FunctionComponent du paquet React (Plus lisible)

3 Régles pour les Hooks
    1. Ne pas apeller les hooks dans une boucle doit être apeller a la racine
    2. Hooks que a partir d'un functionnal component 
    3. Remplace l'état ne le fusionne pas

Hooks Perso : Fonction JS qui commence par use et qui peut apeller d'autres hooks
    Factorise la logique des composants, l'état est isolé

useNavigate ou Link : 
useNavigate est plus complet mais similaire
useNavigate est du coté component alors que Link est du coté DOM


Helpers : Dossier outil

Key JSX : aide React a identifier les élements sur les quels il agit

²Les props :
    Facultatif 
    Une ou plusieurs props
    Permet de mieux découper notre Application, de communiquer entre eux

Spread operator : 
    Fusionne deux objet, si deux valeurs sont comunne dans les objets fusionné, l'objet de droite écrase celui de gauche

Concat :
    permet de fusionner deux tableaux

Filter : 
    permet de retirer un élement d'un tableau 

JSON Server : 
    Simule une API rest 

Asynchrone : 
    Utilise la méthode n'importe ou 

Promise : 
    Permet de faciliter les traitement Asynchrone

Static : 
    La méthode n'est pas rattacher aux instances de la classe mais a la classe directement
    La class n'est pas instancié et on peut utiliser notre class directement
    
*State: Permet de save des données dans le composant, des que les données sont modifié MAJ sur l'interface utilisateur
        Un state peut changer pas une const
        Donnée privé qui permet de sauvegarder les données du componsant

²Demander a Edgar